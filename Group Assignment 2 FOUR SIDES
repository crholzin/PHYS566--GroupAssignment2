# -*- coding: utf-8 -*-
"""
Created on Mon Apr  11 10:27:20 2015

@author: kevinhe
"""



import random
import pylab
import numpy
import math
import matplotlib as mpl

import sys
sys.setrecursionlimit(10**9)
'''
increase the system's tolerance of recursion limits
'''

def gene(n):
    '''
    generate a list of lists that store the info of each grid point
    with sets denoting its state
    if it is empty then it has value set([])
    the sites of four sides have value set([1]), set([2]), set([3]), set([4]) respectively
    if the cluster has touched one edge, its value will be added by e.g set([3]) for the 3rd side
    '''
    
    return [[set([1])]*(n+2)]+ [ [set([2])]+[set([]) for i in range(n)]+[set([3])] for j in range(n) ] +[[set([4])]*(n+2)]

def genlocs(n):
    '''
    generate a list of all initial available locations in tuples
    '''
    locs=[]
    for i in range(1,n+1):
        for j in range(1,n+1):
            locs+=[(i,j)]
    return locs

def ranpop(locs):
    '''
    randomly choose one the locs (which is a list storing the locations)
    return the chosen one while removing it from the list locs
    '''
    one=random.choice(locs)
    return locs.pop(locs.index(one))

def adj(m,loc):
    '''
    return a list of coordinates of all adjacent points
    of all occupied grid
    '''    
    (i,j)=loc
    xys=[(i+1,j),(i-1,j),(i,j+1),(i,j-1)]
    return [(ii,jj) for (ii,jj) in xys if m[ii][jj]!=set([])]

def adjvs(m,loc):
    '''
    return the values of all adjacent occupied points 
    '''
    return [m[ii][jj] for (ii,jj) in adj(m,loc)]

    
def perco(m,loc,s):
    '''
    use recursion to assign the percolated pointed value 1
    '''
    n=len(m)-2
    (i,j)=loc
    m[i][j]=s
    for (ip,jp) in adj(m,(i,j)):
        if (ip not in [0,n+1]) and (jp not in [0,n+1]):
            if m[ip][jp]!=m[i][j]:
                perco(m,(ip,jp),s)
            
        
def main(n):
    '''
    the main function, which takes n as the argument and procduce the 
    simulation for percolation, return the grid and the proportion of occupation
    and the number of grid points in spanning cluster
    '''
    m=gene(n)
    locs=genlocs(n)
    count=0
    (i,j)=(1,1)
    while m[i][j]!=set([0,1,2,3,4]):
        
        (i,j)=ranpop(locs)
        s=set([0])
        for each in adjvs(m,(i,j)):
            s=s|each
        perco(m,(i,j),s)
        count+=1
        
    y=clucount(m)
    p=float(count)/n**2
    return (m,p,y)

def clucount(m):
    '''
    count the number of sites in the spanning cluster
    '''
    y=0
    for a in m[1:-1]:
        for b in a[1:-1]:
            if b==set([0,1,2,3,4]):
                y+=1
    return y
    
def mplot(m,name=''):
    '''
    plot the grid
    if there is another argument called name is assigned a non-empty value
    the picture would be saved under that name in the format of eps
    '''
    mp=[]
    for a in m[1:-1]:
        line=[]
        for b in a[1:-1]:
            if b==set([]):
                line+=[0]
            elif b==set([0,1,2,3,4]):
                line+=[1]
            else:
                line+=[-1]
        mp+=[line]
    cmap = mpl.colors.ListedColormap(['red','white','blue'])
    pylab.imshow(numpy.array(mp),cmap=cmap,vmin=-1,vmax=1,origin='lower',interpolation='nearest')
    pylab.xlabel('x')
    pylab.ylabel('y')
    
    if name!='':
        pylab.savefig(name+'.eps')
        
    pylab.show()
    pylab.close()

def pcplot(ns,pcs,name=''):
    '''
    plot 1/n vs pc
    find value of pc at value 0
    '''
    nrecis=[1.0/n for n in ns]
    pylab.plot(nrecis,pcs)
    pylab.grid()
    pylab.xlabel('1/n')
    pylab.ylabel('Pc')
    '''
    fit to find pc at 0?----------------------------------CHANGE HERE
    '''
    if name!='':
        pylab.savefig(name+'.eps')
        
    pylab.show()
    pylab.close()
    
    #return pc0

def fplot(dps,fs,name=''):
    '''
    plot F vs p-pc(dp as delta-p)
    find value of beta
    '''
    pylab.scatter(dps,fs) # The masses and maximum radii are plotted
    pylab.xlabel('ln of p-pc') # Plot parameters labeled
    pylab.ylabel('ln of F')
    '''
    linefit?---------------------------------------------CHANGE HERE
    '''
    if name!='':
        pylab.savefig(name+'.eps')
        
    pylab.show() 
    pylab.close()
    
    #return beta
    
def part(k,runs):
    '''
    the function that takes care of different parts
    '''
    print 
    print 'part',k
    
    if k=='a':
        ns=[5,10,15,20,30,50,80]
        
        pcs=[]
        msamples=[]
        
        for n in ns:
            ps=[]
            for t in range(runs):
                (m,p,x)=main(n)
                ps+=[p]
            pcs+=[sum(ps)/runs]
            msamples+=[m]     
        
        mplot(m)
        pcplot(ns,pcs) 
    
    if k=='b':
        n=100
        pys=[]
        
        for t in range(runs):
            (m,p,y)=main(n)
            pys+=[(p,y)]
        pc=sum([p for (p,y) in pys])/runs
        
        fs=[]
        dps=[]
        
        for (p,y) in pys:
            if p>pc:
                fs+=[math.log(float(y)/(p*n**2))]
                dps+=[math.log(p-pc)]
        mplot(m)
        fplot(dps,fs)

n=6
print 'trial for n='+str(n)
(m,p,y)=main(n)
mplot(m)
print p
print y


ks=['a','b']
'''
change the number of runs here
'''
runs=50
for k in ks:
    part(k,runs)
